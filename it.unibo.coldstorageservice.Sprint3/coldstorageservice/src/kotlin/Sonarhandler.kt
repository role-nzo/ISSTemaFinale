/* Generated by AN DISI Unibo */

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import java.io.BufferedReader
import java.io.InputStreamReader
import java.net.Socket
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
import java.net.InetSocketAddress
import java.net.ServerSocket

class Sonarhandler ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){
	var hostAddress = "192.168.1.141"
	lateinit var socket: Socket
	lateinit var serverSocket:ServerSocket
	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		var  ApplAlso = sysUtil.getActor("appl") != null
		var  Stopped = false
		var  Limit = 10

		serverSocket = ServerSocket(6527)
		socket = serverSocket.accept()

		var reader = BufferedReader(  InputStreamReader(socket.getInputStream() ))
		var data = ""

		return { //this:ActionBasciFsm
			state("s0") { //this:State
				action { //it:State
					CommUtils.outblack("sonar23 | start with appl: $ApplAlso")
					//subscribeToLocalActor("sonar")
					//genTimer( actor, state )
				}
				//After Lenzi Aug2002
				sysaction { //it:State
				}
				transition( edgeName="goto",targetState="work", cond=doswitch() )
			}
			state("work") { //this:State
				action { //it:State
					data = reader.readLine()
					println(data)
				}
				//After Lenzi Aug2002
				sysaction { //it:State
				}
				transition(edgeName="t02",targetState="handlerobotstop",cond=whenDispatch("robotstop"))
				transition(edgeName="t03",targetState="handlerobotstopfailed",cond=whenDispatch("robotstopfailed"))
				transition(edgeName="t04",targetState="handlerobotresume",cond=whenDispatch("robotresume"))
				transition(edgeName="t01",targetState="handlesonardata",cond=doswitch())
			}
			state("handlesonardata") { //this:State
				action { //it:State
					CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")



					if (data == "LOW" && !Stopped){

						CommUtils.outblack("INVIO STOP")
						emitLocalStreamEvent("stopevent", "stopevent(_)" )
					}
					else if(data == "HIGH" && Stopped) {

						CommUtils.outblack("INVIO RESUME")
						emitLocalStreamEvent("resumevent", "resumevent(_)" )
					}
					//genTimer( actor, state )
				}
				//After Lenzi Aug2002
				sysaction { //it:State
					stateTimer = TimerActor("timer_handlesonardata",
						scope, context!!, "local_tout_sonarhandler_handlesonardata", 100.toLong() )
				}
				transition(edgeName="t15",targetState="work",cond=whenTimeout("local_tout_sonarhandler_handlesonardata"))
				transition(edgeName="t16",targetState="handlerobotstop",cond=whenDispatch("robotstop"))
				transition(edgeName="t17",targetState="handlerobotstopfailed",cond=whenDispatch("robotstopfailed"))
				transition(edgeName="t18",targetState="handlerobotresume",cond=whenDispatch("robotresume"))
			}
			state("handlerobotstop") { //this:State
				action { //it:State
					Stopped = true
					//genTimer( actor, state )
				}
				//After Lenzi Aug2002
				sysaction { //it:State
				}
				transition( edgeName="goto",targetState="work", cond=doswitch() )
			}
			state("handlerobotstopfailed") { //this:State
				action { //it:State
					Stopped = false
					//genTimer( actor, state )
				}
				//After Lenzi Aug2002
				sysaction { //it:State
				}
				transition( edgeName="goto",targetState="work", cond=doswitch() )
			}
			state("handlerobotresume") { //this:State
				action { //it:State
					Stopped = false
					//genTimer( actor, state )
				}
				//After Lenzi Aug2002
				sysaction { //it:State
				}
				transition( edgeName="goto",targetState="work", cond=doswitch() )
			}
			state("sonar23") { //this:State
				action { //it:State
					CommUtils.outblack("$name BYE")
					//genTimer( actor, state )
				}
				//After Lenzi Aug2002
				sysaction { //it:State
				}
			}
		}
	}
} 
