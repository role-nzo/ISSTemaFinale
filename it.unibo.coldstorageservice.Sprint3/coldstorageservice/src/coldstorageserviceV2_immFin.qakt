System coldstorageservice
 
//mqttBroker "broker.hivemq.com" :  1883 eventTopic "unibo/zdel/sonar/events"
//mqttBroker "mqtt.eclipseprojects.io" : 1883 eventTopic "unibo/sonar/events"

Dispatch coapUpdate: coapUpdate(RESOURCE, VALUE)
Event alarm           : alarm(X)

Request engage        : engage(OWNER)
Reply   engagedone    : engagedone(ARG)
Reply   engagerefused : engagerefused(ARG)

Dispatch disengage    : disengage(ARG)

Dispatch setrobotstate: setpos(X,Y,D)
Dispatch setdirection : dir( D )  //D =up|down!left|right

Request  doplan   : doplan( PATH, OWNER, STEPTIME )
Reply doplandone  : doplandone( ARG )
Reply doplanfailed  : doplanfailed( PLANDONE, PLANTODO )


Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(ARG)


Dispatch goMoveToIndoor   : goMoveToIndoor(_)
Dispatch goMoveToColdRoom : goMoveToColdRoom(_)
Dispatch goMoveToHome     : goMoveToHome(_)


//Ottenimento del ticket
Request newticket		: newticket( FW )
Reply newticketaccepted : newticketaccepted( TICKET )
Reply newticketrefused  : newticketrefused( REASON )


//Show ticket per rilascio merce
Request storefood 		: storefood( TICKET, FW )
Reply storefoodaccepted : storefoodaccepted( MESSAGE )
Reply storefoodrejected : storefoodrejected( REASON )


Request loaddone	: loaddone(FW)
Reply chargetaken	: chargetaken(MESSAGE)
Reply chargefailure : chargefailure(REASON)


Request waitLoad : waitLoad(_)
Reply waitLoadDone : waitLoadDone(_)

Dispatch depositdone : depositdone(_)
Dispatch updatevirtualweight : updatevirtualweight(FW)

Request clearColdRoom : clearColdRoom(_)
Reply coldRoomCleared : coldRoomCleared(_)

//invio mappa 
Dispatch sendmap 	: sendmap(_)

//sonar e led
Event sonardata : distance(D)   //emitted  by distancefilter
Event obstacle  : obstacle(D)   //emitted as stream by distancefilter
Dispatch resume    : resume( _ ) 
Dispatch stop : stop(D) //stop da inviare al transporttrolley

//Eventi sonar
Event stopevent : stopevent(_)
Event resumevent : resumevent(_)

Dispatch robotstop : robotstop(_)
Dispatch robotstopfailed : robotstopfailed(_)
Dispatch robotresume : robotresume(_) 

//Eventi led
Event ledstatuschange : ledstatuschange(STATUS)


Context ctxbasicrobot 		  ip [host="127.0.0.1" port=8020] 
Context ctxcoldstorageservice ip [host="localhost" port=8022]

//FOR IMAGE
Context ctxserviceaccessgui ip [host="localhost" port=8023]
Context ctxservicestatusgui ip [host="localhost" port=8024]
Context ctxraspberry 		  ip [host="192.168.1.35" port=8023]


ExternalQActor basicrobot context ctxbasicrobot
ExternalQActor robotposendosimbiotico context ctxbasicrobot

//CodedQActor sonar  context ctxcoldstorageservice className "sonarSimulator"           //IN LOCALE
CodedQActor sonarsupport  context ctxcoldstorageservice className "sonarHCSR04Support23"  
//CodedQActor led context ctxcoldstorageservice className "ledSupport23"

//CodedQActor datacleaner    context ctxcoldstorageservice className "rx.dataCleaner"
//CodedQActor distancefilter context ctxcoldstorageservice className "rx.distanceFilter"

QActor sonar context ctxraspberry{
	State s0 initial{
		
	}
}

QActor led context ctxraspberry{
	State s0 initial{
		
	}
}

QActor ledobserver context ctxcoldstorageservice{
	[#var Msg = ""#]
	State s0 initial{  
		println("led23 | start  ") 
		observeResource transporttrolley
	}
	Goto observing 
	
	State observing{
			
	}
	Transition t0 whenMsg coapUpdate -> doObserve

	State doObserve{
		printCurrentMessage
		[#Msg = currentMsg.msgContent().split(", ")[1] //.split("(")[1].split(")")[0]
		 println("-" + Msg.trim() + "-")
		 if(Msg.trim() != ")"){
		 	Msg = Msg.split("(")[1].split(")")[0]
		  
		 println(Msg)
		 println(currentMsg.msgContent())
		 if(Msg == "stopped"){
		#]
			emit ledstatuschange : ledstatuschange(stopped) [#
		}		
		 if(Msg == "moving"){
		#]
			emit ledstatuschange : ledstatuschange(moving) [#
		}else {#]
			emit ledstatuschange : ledstatuschange(home) [#
		}}#]
		  
	}
	Goto observing
}

CodedQActor ledsupport context ctxcoldstorageservice className "ledSupport23"

QActor sonarhandler context ctxcoldstorageservice{ 
	[# var  ApplAlso = sysUtil.getActor("appl") != null
	   var  Stopped = false
	   var  Limit = 10
	   	
	#]
	State s0 initial{  
		println("sonar23 | start with appl: $ApplAlso") 
		//[# subscribeToLocalActor("distancefilter").subscribeToLocalActor("datacleaner").subscribeToLocalActor("sonar") #]  //.subscribeToLocalActor("sonar")
		[# subscribeToLocalActor("sonar") #]
	}
	Goto work
	 
	State work{
		//println("sonar23 | waits ... ") 		
		//updateResource [# "sonar23 waiting ..." #]
	}
	Transition t0 whenEvent sonardata -> handlesonardata 
	              //whenEvent obstacle  -> handleobstacle
	              whenMsg robotstop -> handlerobotstop
				  whenMsg robotstopfailed -> handlerobotstopfailed
				  whenMsg robotresume -> handlerobotresume

	
	State handlesonardata{		
		printCurrentMessage
		onMsg(sonardata : distance(D)){
			[#
				var d = payloadArg(0)
				if (d == "LOW" && !Stopped){
					
				#]
					println("INVIO STOP")	
				//forward transporttrolley -m stop : stop(_)
					emit stopevent : stopevent(_)
				[#}
				else if(d == "HIGH" && Stopped) {
					
				#]
					println("INVIO RESUME")
					emit resumevent : resumevent(_)
				//forward transporttrolley -m resume : resume(_)
				[#}
			
			#]	
		}
		
		//updateResource [# "sonar23 handles $currentMsg" #]
	}
	Transition t1 whenTime 100 -> work
				  whenMsg robotstop -> handlerobotstop
				  whenMsg robotstopfailed -> handlerobotstopfailed
				  whenMsg robotresume -> handlerobotresume
	
	State handlerobotstop{
		[#Stopped = true #]
	}Goto work
	
	State handlerobotstopfailed{
		[#Stopped = false #]
	}Goto work
	
	State handlerobotresume{
		[#Stopped = false #]
	}Goto work
	
	/*State handleobstacle{
		onMsg( obstacle : obstacle(D)){			
			println("$name handleobstacle ALARM ${payloadArg(0)}") color magenta
			//emit alarm : alarm(obstacle)			
		}
		
	}
	Goto sonar23 if [# ApplAlso == true #]  else work*/  
	
	State sonar23{
		println("$name BYE")
	}
}   

//Si puÃ² eliminare
/*
QActor sonar23observer context ctxcoldstorageservice{
	State s0 initial{  
		println("sonar23observer | start  ") 
		observeResource sonar23
	}
	Goto observing 
	
	State observing{
		
	}
	Transition t0 whenMsg coapUpdate -> doObserve

	State doObserve{
		printCurrentMessage
	}
	Goto observing
	
} */


 
/*
QActor sendevent context ctxcoldstorageservice{
	
	State s0 initial {
		
		
		delay 27000
		println("mancano 3 sec") color blue
		delay 3000
		println("sendevent starts") color blue
		emit sonardata : sonardata(obstacle)
		delay 3000
		emit resume : resume(_) 			
	}
}*/

QActor transporttrolley context ctxcoldstorageservice{
	[#
		var GoingTo = " "
		var LastStopTime = 0L
		var Mint = 5000
		var AlarmCondition = false
		var MoveAlarm = " "
	#]
	State s0 initial {
		println("transporttrolley starts") color blue
		//Acquisizione del basicrobot
    	request basicrobot -m engage : engage(transporttrolley,330)
	}
	Transition t0 whenReply engagedone    -> init
                  whenReply engagerefused -> waitrobotfree
                  
    State waitrobotfree{
		println("transporttrolley engage refused") color blue
	}
	
	State init{
		println("transporttrolley init") color blue
		[# subscribeToLocalActor("sonarhandler")#]  //.subscribeToLocalActor("sonar")
	} Goto waitcoldstorageservicerequest
	
	
	State waitcoldstorageservicerequest {
	  println("$name | waiting the client request...") color blue
	}
	Transition t0 whenMsg goMoveToIndoor   -> elabMoveIndoor
				  whenMsg goMoveToColdRoom -> elabMoveColdRoom
				  whenMsg goMoveToHome     -> elabMoveHome
	 
	State elabMoveIndoor {	
		printCurrentMessage color blue	
		[# GoingTo = "INDOOR"#]
		request basicrobot -m moverobot	: moverobot(0, 4)
	}
	Goto waitRobot
	
	State elabMoveColdRoom {
		printCurrentMessage color blue
        [# GoingTo = "COLDROOM"#]
        request basicrobot -m moverobot	: moverobot(4, 3)	
	}
	Goto waitRobot
	
	State elabMoveHome {
		printCurrentMessage color blue
		[# GoingTo = "HOME"#]
        request basicrobot -m moverobot	: moverobot(0, 0)		
	}
	Goto waitRobot
	
	State waitRobot{
		println("Wait robot")
		updateResource [# "transporttrolleystatus(moving)"#]
	}
	Transition t1 whenEvent stopevent -> checkSonarData
				  //whenReply moverobotfailed -> waitcoldstorageservicerequest
				  whenReply moverobotfailed -> robothit
				  whenReply moverobotdone -> planFinishSwitch
				  //whenMsg stop -> checkSonarData
	
	State robothit{
		printCurrentMessage
		println("Robot hit")
		updateResource [# "transporttrolleystatus(stopped)"#]
	}
	Goto waitcoldstorageservicerequest
		  
	State planFinishSwitch{
		
	}Goto planFinishIndoor if [#GoingTo == "INDOOR"#] else planFinishSecondSwitch
	
	State planFinishSecondSwitch{
		
	}Goto planFinishColdRoom if [#GoingTo == "COLDROOM"#] else planFinishHome
	
	State checkSonarData {
		[#
		   val currentTime = java.time.Instant.now().epochSecond
		   AlarmCondition = (currentTime - LastStopTime)*1000 > Mint
		   if(AlarmCondition){ MoveAlarm = "STOP"#]
		   		
				emit alarm : alarm(stop)
	            //forward sonar23 -m robotstop : robotstop(_)
				println("alarm emitted")
				
				
		 [# println(AlarmCondition)}
		   else{
		   		MoveAlarm = "WAIT"
		   		#]	   		
		   		forward sonarhandler -m robotstopfailed : robotstopfailed(_)
		   		println("Stop failed: not enough time from last stop")
		   [#}			
		#]		
	}
	//Goto stopped if [# MoveAlarm == "STOP" #] else waitRobot
	Transition t3 whenReply moverobotfailed -> stopped
				  whenReply moverobotdone -> planFinishSwitch
	
	State stopped{
		println("Sono fermo")
		[#LastStopTime = java.time.Instant.now().epochSecond#]
		forward sonarhandler -m robotstop : robotstop(_)
		updateResource [# "transporttrolleystatus(stopped)"#]
		updateResource [# "robotfree(fermo)"#]
	}
	Transition t2 whenEvent resumevent -> resuming
				 //whenMsg resume -> resuming
	
	State resuming {
		println("Resuming")
		forward sonarhandler -m robotresume : robotresume(_)
		[#if(GoingTo == "HOME"){#]
			updateResource [# "robotfree(libero)"#]
		[#}else{#]
			updateResource [# "robotfree(occupato)"#]	
		[#}#]
		
	}Goto elabMoveIndoor if [#GoingTo == "INDOOR"#] else secondResuming
	
	State secondResuming{
		
	}Goto elabMoveColdRoom if [#GoingTo == "COLDROOM"#] else elabMoveHome
						 
	
	State planFinishIndoor {
		//prendere il carico
		
		println("$name | at Indoor") color blue
		delay 3000
	} Transition t1 whenRequest waitLoad -> elabWaitLoad
	
	State planFailedIndoor {
		
		println("$name | at Indoor") color blue
		delay 3000
		
	} Transition t1 whenRequest waitLoad -> elabWaitLoad
	
	State elabWaitLoad {
		replyTo waitLoad with waitLoadDone  : waitLoadDone(valid)
	} Goto elabMoveColdRoom
	
	State planFinishColdRoom {
		//depositare il carico
		
		println("$name | at ColdRoom") color blue
		delay 1500
		forward coldstorageservice -m depositdone : depositdone(0)
		
	} Transition t5 whenTime 4000 -> elabMoveHome
		  			whenMsg goMoveToIndoor  -> elabMoveIndoor
	
	State planFinishHome {
		
		println("$name | at home") color blue
		updateResource [# "transporttrolleystatus(home)"#]
		delay 1000
		
		//NON FUNZIONA
		//forward basicrobot -m setdirection : dir(down)
	    
	} Goto waitcoldstorageservicerequest
		
}



QActor statusservice context ctxcoldstorageservice {
	
	[#
		var Map = ""
		var PosX = 0
		var PosY = 0
		var RobotFree = "libero"
		var CurrentWeightReal = 0 
		var RejectedTickets = 0  
	#]
	
	State s0 initial {
		
		[#
			//CoapObserverSupport(myself, "localhost","8020","ctxbasicrobot","robotposendosimbiotico")	
			CoapObserverSupport(myself, "localhost","8020","ctxbasicrobot","robotpos")
		#]
		observeResource coldstorageservice
		observeResource transporttrolley
		//request basicrobot -m moverobot	: moverobot(0, 0)
		forward transporttrolley -m goMoveToHome : goMoveToHome(0)
	}
	Goto observing
	
	State observing {
		
	} Transition t0 whenMsg coapUpdate -> doObserve
	 				whenMsg sendmap -> sendMap

	
	State sendMap{
		
		println("$Map")
		updateResource [# "status($Map, $PosX, $PosY, $RobotFree, $CurrentWeightReal, $RejectedTickets)" #]
		println("$Map")
		
	}Goto observing
	
	State doObserve{
		println("print doObserve")
		printCurrentMessage
		[#
			val msg = currentMsg.msgContent().drop(11).dropLast(1)
			val resource = msg.split(", ")[0]
			val value = msg.dropWhile { it != ',' }.drop(2)
						 
			if( resource == "coldstorageservice" || resource == "transporttrolley" ) {
				if( value.startsWith("robotfree") ) {
					RobotFree = value.split("(")[1].dropLast(1)
				} else if( value.startsWith("ticketrejected") ) {
					println("Status " + RejectedTickets)
					RejectedTickets++
				} else if( value.startsWith("weightUpdate") ) {
					CurrentWeightReal = value.split("(")[1].dropLast(1).toInt()
				}
			} else if( resource == "robotpos" ) {
				
				if( value.startsWith("|") ) {
					Map = value.substring(0, value.lastIndexOf("\n"))
					var temp = value.substring(value.lastIndexOf("\n")).split(")")[0].split("(")[1]
					PosX = temp.split(",")[0].toInt()
					PosY = temp.split(",")[1].toInt()
				}
			}
			
			println(resource)
			println(value) 
		#]
		updateResource [# "status($PosX, $PosY, $RobotFree, $CurrentWeightReal, $RejectedTickets)" #]
	}
	Goto observing
	
}

QActor emptycoldroom context ctxcoldstorageservice{
	
	State s0 initial{
		
		delay 120000
		request coldstorageservice -m clearColdRoom : clearColdRoom(0)
		println("$name | richiesta svuotamento coldroom")
		
	}Goto s0
		
}

QActor ticketservice context ctxcoldstorageservice {
	
	[# var ticketList = mutableListOf<Ticket>() 
	   var currentWeightVirtual = 0 
	   var maxWeight = 100
	   var TimeMax = 300
	   var Ticketsrejected = 0
	#]
	
	State s0 initial{
		println("$name | wait for request") color yellow
		printCurrentMessage
	}
	Transition t0 whenRequest newticket -> elabNewTicket
				 	whenRequest storefood  -> elabStoreFood
				  whenMsg updatevirtualweight -> elabUpdateVirtualWeight
	

	State elabNewTicket{
		
		println("$name | elab new ticket") color yellow
		printCurrentMessage
		onMsg( newticket : newticket( FW )){
			
			[#
			val currentTime = java.time.Instant.now().epochSecond 
			for( t in ticketList){
				if((currentTime - t.creationTime) > TimeMax){
					currentWeightVirtual -= t.fw
					ticketList.remove(t)
				}
			}
			var fw = payloadArg(0).toInt()
			if(currentWeightVirtual + fw <= maxWeight){
				currentWeightVirtual += fw
				var Id = Ticket.getRandomId() 
				var found = false
				while(found){
				found = false
				
					for (t in ticketList){
						if(t.id==Id){
							Id = Ticket.getRandomId()
							found = true
							break
						}
					}
				}
				
				var ticket = Ticket(Id, java.time.Instant.now().epochSecond, fw)
				
				ticketList.add(ticket)
				
				println(ticket)
				
			
				#] replyTo newticket with newticketaccepted:newticketaccepted( $Id ) [#
				} else {
				#] replyTo newticket with newticketrefused:newticketrefused( Peso ) [#
				}
			#]
		}
		
	}
	Goto s0
	
	State elabUpdateVirtualWeight{
			println("$name | virtual weight update") color yellow
			printCurrentMessage
			onMsg( updatevirtualweight : updatevirtualweight(FW)){
				[#
					currentWeightVirtual = currentWeightVirtual - payloadArg(0).toInt()
				#]
			}
			println("$name | current virtual weight: $currentWeightVirtual") color yellow
	}Goto s0
	
	State elabStoreFood{
		
		println("$name | elab ticket request") color yellow
		printCurrentMessage
		onMsg( storefood : storefood( TICKET, FW )) {
			[#
				val currentTime = java.time.Instant.now().epochSecond 
		   	   	val idTicket = payloadArg(0)
		   	   	val foodWeight = payloadArg(1).toInt()
		   	   
		   	   	var ticket : Ticket? = null
		   	   
		   	   	for (t in ticketList) {
					//ciclo for per trovare il biglietto del driver nella lista
		   	   	  	if(t.id == idTicket) {
		   	   	  	
		   	   	  		ticket = t
		   	   	  		break
		   	   	  	}
		   	   	}
		   	   
		   	   	if(ticket==null) { 
		   	   		println("Not found")
	   	   			#]
		   	   		replyTo storefood with storefoodrejected  : storefoodrejected(invalid)
		   	   		[#
		   	   	} else {   
			   	  	
				   	if(foodWeight<ticket!!.fw){
						currentWeightVirtual -= (ticket!!.fw-foodWeight)
				   	}
				   	   
					ticketList.remove(ticket)
				   	   
					println(currentTime - ticket!!.creationTime)
				   	   
					if((currentTime - ticket!!.creationTime) < TimeMax) {	
				   	   	println("ticket valid")	
			   	   		#]
						replyTo storefood with storefoodaccepted  : storefoodaccepted(valid)
						[#
					} else{
						currentWeightVirtual -= ticket!!.fw
						println("ticketservice " + Ticketsrejected)
						//TODO: "Ticketsrejected" non serve su "coldstorageservice" ma solo su "statusservice"
						Ticketsrejected++
						#]
						updateResource [# " ticketrejected($Ticketsrejected)" #]
						replyTo storefood with storefoodrejected  : storefoodrejected(invalid)		 	 
			  			[#
			  		}
		  		}
  			#]	  	
		}		
	}
	Goto s0
}



QActor coldstorageservice context ctxcoldstorageservice{ //Registrata a coldRoom
	
	[# var CurrentWeightReal = 0
	   var CurrentTicketFW = 0
	   var Ticketsrejected = 0
	#]
	
	State s0 initial{
		println("coldstorageservice starts") color green
		
		delegate "newticket" to ticketservice
				
	}
	Goto waitclientrequest
	
	
	State waitclientrequest{
	  println("$name | waiting the client request...") color green
	  
	}
	Transition t0 whenRequest storefood  -> elabStoreFood
				  whenRequest clearColdRoom  -> elabClearColdRoom
	
	State elabStoreFood {
		printCurrentMessage
		onMsg( storefood : storefood( TICKET, FW )) {
			[# 
		   	   	val IDTicket = payloadArg(0)
		   	   	val FoodWeight = payloadArg(1)   	
		   	#]
		   	
		   	request ticketservice -m storefood : storefood( $IDTicket, $FoodWeight )
	   	}
	}
	Transition t1 whenReply storefoodaccepted -> elabStoreFoodAccepted
				  whenReply storefoodrejected -> elabStoreFoodRejected
				  
	
	State elabStoreFoodAccepted {
		printCurrentMessage
		replyTo storefood with storefoodaccepted  : storefoodaccepted(valid)
	} Goto waitLoadDoneRequest
	
	State elabStoreFoodRejected  {
		printCurrentMessage
		[# Ticketsrejected++ #]
		updateResource [# "ticketrejected($Ticketsrejected)" #]
		replyTo storefood with storefoodrejected  : storefoodrejected(invalid)
	} Goto waitclientrequest
	
	
	State waitLoadDoneRequest{
		println("$name | wait load request") color green
		
	}
	Transition t2 whenRequest loaddone -> elabLoadDone
	
	State elabLoadDone {
		//ROBOT diventa occupato
		updateResource [# "robotfree(occupato)" #]
		printCurrentMessage
		println("$name | elab load done") color green
		
		onMsg( loaddone : loaddone(FW)) {
			[# 
					CurrentTicketFW = payloadArg(0).toInt()
			#]
			forward transporttrolley -m goMoveToIndoor   : goMoveToIndoor(0)
			request transporttrolley -m waitLoad : waitLoad(0)
			
		}
	}
	Transition t3 whenReply waitLoadDone -> elabChargeTaken
	
	State elabChargeTaken {
		printCurrentMessage
		println("$name | elab charge taken") color green
				
		replyTo loaddone with chargetaken : chargetaken(0)
	} Goto elabWaitDepositDone
	
	State elabWaitDepositDone {
		println("$name | elab wait load done") color green
	}
	Transition t4 whenMsg depositdone -> elabDepositDone
	
	
	State elabDepositDone {
		println("$name | elab deposit") color green
		printCurrentMessage
		[#
			CurrentWeightReal += CurrentTicketFW	
		#]
		updateResource [# "weightUpdate($CurrentWeightReal)" #]
		updateResource [# "depositdone($CurrentWeightReal)" #]
		//ROBOT libero
		updateResource [# "robotfree(libero)" #]
		
		println("Deposit - Current weight real: $CurrentWeightReal") color green 
	}
	Goto waitclientrequest
				  
	
	State moveRobotHome {
		
		forward transporttrolley -m goMoveToHome     : goMoveToHome(0)
		
	}
	Goto waitclientrequest
	
	State elabClearColdRoom{
		println("$name | empty coldRoom") color green
		printCurrentMessage
		forward ticketservice -m updatevirtualweight : updatevirtualweight($CurrentWeightReal)
		
		[#
			CurrentWeightReal = 0	
		#]
		updateResource [# "weightUpdate($CurrentWeightReal)" #]
		updateResource [# "clearcoldroomdone($CurrentWeightReal )" #]
		println("$name | coldRoom cleared - current weight real: $CurrentWeightReal") color green
		replyTo clearColdRoom with coldRoomCleared : coldRoomCleared(0)
	
	}Goto waitclientrequest
	
	
}


//FOR IMAGE
QActor serviceaccessgui context ctxserviceaccessgui{
	State s0 initial {
		println("fridgetruck starts") color red
		
		observeResource statusservice
		request coldstorageservice -m newticket		: newticket( 3 )
	}
	Transition t0 whenReply newticketaccepted -> elabTicketAccepted
	
	State elabTicketAccepted {
		
		printCurrentMessage
		onMsg( newticketaccepted : newticketaccepted(TICKET)){
			[# 
				var CurrentTicketId = payloadArg(0)
				println(CurrentTicketId)
			#]
			
			request coldstorageservice -m storefood : storefood($CurrentTicketId, 3)
		}
	}
	Transition t1 whenReply storefoodaccepted -> elabLoadDone
				  //whenReply ticketrejected -> s0
	
	State elabLoadDone {
		request coldstorageservice -m loaddone : loaddone( 3 )
	}
	Transition t1 whenReply chargetaken -> elabChargeTaken
	
	State elabChargeTaken {
		printCurrentMessage
	}
}

QActor servicestatusgui context ctxservicestatusgui{
	State s0 initial{
		
		observeResource statusservice
		
	}
}


