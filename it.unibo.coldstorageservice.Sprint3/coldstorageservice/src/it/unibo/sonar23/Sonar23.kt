/* Generated by AN DISI Unibo */ 
package it.unibo.sonar23

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar23 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var  ApplAlso = sysUtil.getActor("appl") != null
			   var  Stopped = false
			   var  Limit = 10
			   	
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("sonar23 | start with appl: $ApplAlso")
						 subscribeToLocalActor("sonar")  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="handlesonardata",cond=whenEvent("sonardata"))
					transition(edgeName="t02",targetState="handleobstacle",cond=whenEvent("obstacle"))
				}	 
				state("handlesonardata") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("distance(D)"), Term.createTerm("distance(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var d = payloadArg(0)
												if (d == "LOW" && !Stopped){
													
								CommUtils.outblack("INVIO STOP")
								emit("stopevent", "stopevent(_)" ) 
								}
												else if(d == "HIGH" && Stopped) {
													
								CommUtils.outblack("INVIO RESUME")
								emit("resumevent", "resumevent(_)" ) 
								}
											
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_handlesonardata", 
				 	 					  scope, context!!, "local_tout_sonar23_handlesonardata", 100.toLong() )
					}	 	 
					 transition(edgeName="t13",targetState="work",cond=whenTimeout("local_tout_sonar23_handlesonardata"))   
					transition(edgeName="t14",targetState="handlerobotstop",cond=whenDispatch("robotstop"))
					transition(edgeName="t15",targetState="handlerobotstopfailed",cond=whenDispatch("robotstopfailed"))
					transition(edgeName="t16",targetState="handlerobotresume",cond=whenDispatch("robotresume"))
				}	 
				state("handlerobotstop") { //this:State
					action { //it:State
						Stopped = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handlerobotstopfailed") { //this:State
					action { //it:State
						Stopped = false  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handlerobotresume") { //this:State
					action { //it:State
						Stopped = false  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleobstacle") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("obstacle(D)"), Term.createTerm("obstacle(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outmagenta("$name handleobstacle ALARM ${payloadArg(0)}")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="sonar23", cond=doswitchGuarded({ ApplAlso == true  
					}) )
					transition( edgeName="goto",targetState="work", cond=doswitchGuarded({! ( ApplAlso == true  
					) }) )
				}	 
				state("sonar23") { //this:State
					action { //it:State
						CommUtils.outblack("$name BYE")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
