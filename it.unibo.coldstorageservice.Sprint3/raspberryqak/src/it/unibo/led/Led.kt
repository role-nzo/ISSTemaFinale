/* Generated by AN DISI Unibo */ 
package it.unibo.led

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter

class Led ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	lateinit var writer : BufferedWriter

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
				return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("led starts")
						//genTimer( actor, state )

						val pythonEnrico = "C://Users//zacen//AppData//Local//Programs//Python//Python311//python "
						val eseguibileEnrico = "C://Users//zacen//OneDrive//Desktop//ISSTemaFinale//it.unibo.coldstorageservice.Sprint3//coldstorageservice//resources//SonarReceiver.py "

						val testLucaPython =  "/Library/Frameworks/Python.framework/Versions/3.8/bin/python3 "
						val testLucaSonarSimulator = "//Users//lucadominici//Desktop//IngegneriaSoftware//ProgettoFinale//ISSTemaFinale//it.unibo.coldstorageservice.Sprint3//coldstorageservice//resources//SonarSimulator.py"
						val p  = Runtime.getRuntime().exec(pythonEnrico + eseguibileEnrico )
						//val p  = Runtime.getRuntime().exec( testLucaPython + testLucaSonarSimulator )
						Thread.sleep(5000)
						writer = BufferedWriter(  OutputStreamWriter (p.getOutputStream() ))

					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t10",targetState="elabledstatuschange",cond=whenDispatch("ledstatuschange"))
				}	 
				state("elabledstatuschange") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ledstatuschange(STATUS)"), Term.createTerm("ledstatuschange(STATUS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
													var statusLed = payloadArg(0)  //Home, Moving, Stopped
							writer.write(statusLed)

						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
