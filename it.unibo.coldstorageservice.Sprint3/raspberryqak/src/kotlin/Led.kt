/* Generated by AN DISI Unibo */

import alice.tuprolog.*
import it.unibo.kactor.*
import kotlinx.coroutines.CoroutineScope
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import java.io.BufferedWriter
import java.io.File
import java.io.OutputStreamWriter

class Led ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	lateinit var writer : BufferedWriter

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		//var writer : BufferedWriter?
				return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("led starts")
						//CoapObserverSupport(myself, "192.168.1.141","8022","ctxcoldstorageservice","transporttrolley")
						CoapObserverSupport(myself, "192.168.218.29","8022","ctxcoldstorageservice","transporttrolley")
						//genTimer( actor, state )

						try {
							val pythonRasp = "/usr/bin/python3"
							val eseguibileLed = " /unibo.raspberry-3.0/bin/LedDevice.py"

							//val testLucaPython =  "/Library/Frameworks/Python.framework/Versions/3.8/bin/python3 "
							//val testLucaSonarSimulator = "//Users//lucadominici//Desktop//IngegneriaSoftware//ProgettoFinale//ISSTemaFinale//it.unibo.coldstorageservice.Sprint3//coldstorageservice//resources//SonarSimulator.py"
							val builder = ProcessBuilder("/usr/bin/python3","/unibo.raspberry-3.0/bin/LedDevice.py")
							//builder.redirectOutput(File("outLed.txt"));
							//builder.redirectError(File("outLed.txt"));
							val pr = builder.start() // may throw IOException

							//val p = Runtime.getRuntime().exec("/usr/bin/python3 /unibo.raspberry-3.0/bin/LedDevice.py")
							//val p  = Runtime.getRuntime().exec( testLucaPython + testLucaSonarSimulator )
							//Thread.sleep(5000)
							writer = BufferedWriter(OutputStreamWriter(pr.getOutputStream()))
						}catch(e : Exception){
							println("WARNING: $name does not find low-level code")
							println(e.printStackTrace())
						}
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						//genTimer( actor, state )

					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t10",targetState="elabledstatuschange",cond=whenDispatch("coapUpdate"))
				}	 
				state("elabledstatuschange") { //this:State
					action { //it:State
						/*if( checkMsgContent( Term.createTerm("coapUpdate(RESOURCE, VALUE)"), Term.createTerm("coapUpdate(RESOURCE, VALUE)"),
						                        currentMsg.msgContent()) ) { //set msgArgList*/
							if(currentMsg.msgContent().contains("transporttrolleystatus")){
								var statusLed = currentMsg.msgContent().drop(11).dropLast(1).split("(")[1].split(")")[0]  //Home, Moving, Stopped
								println(statusLed)
								if(::writer.isInitialized) {
									writer.write(statusLed+"\n")
									writer.flush()
								}
							}


						//}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
} 
