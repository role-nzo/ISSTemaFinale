/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldstorageservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var CurrentWeightReal = 0
			   var CurrentTicketFW = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("coldstorageservice starts")
						delegate("newticket", "ticketservice") 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
				state("waitclientrequest") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | waiting the client request...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t017",targetState="elabTicketRequest",cond=whenRequest("ticketrequest"))
					transition(edgeName="t018",targetState="elabClearColdRoom",cond=whenRequest("clearColdRoom"))
				}	 
				state("elabTicketRequest") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("ticketrequest(TICKET,FW)"), Term.createTerm("ticketrequest(TICKET,FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
										   	   	val IDTicket = payloadArg(0)
										   	   	val FoodWeight = payloadArg(1)   	
								request("ticketrequest", "ticketrequest($IDTicket,$FoodWeight)" ,"ticketservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t119",targetState="elabTicketAccepted",cond=whenReply("ticketaccepted"))
					transition(edgeName="t120",targetState="elabTicketRejected",cond=whenReply("ticketrejected"))
				}	 
				state("elabTicketAccepted") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						answer("ticketrequest", "ticketaccepted", "ticketaccepted(valid)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitLoadDoneRequest", cond=doswitch() )
				}	 
				state("elabTicketRejected") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						answer("ticketrequest", "ticketrejected", "ticketrejected(invalid)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
				state("waitLoadDoneRequest") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | wait load request")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t221",targetState="elabLoadDone",cond=whenRequest("loaddone"))
				}	 
				state("elabLoadDone") { //this:State
					action { //it:State
						updateResourceRep( "robotfree(occupato)"  
						)
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outgreen("$name | elab load done")
						if( checkMsgContent( Term.createTerm("loaddone(FW)"), Term.createTerm("loaddone(FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
													CurrentTicketFW = payloadArg(0).toInt()
								forward("goMoveToIndoor", "goMoveToIndoor(0)" ,"transporttrolley" ) 
								request("waitLoad", "waitLoad(0)" ,"transporttrolley" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t322",targetState="elabChargeTaken",cond=whenReply("waitLoadDone"))
				}	 
				state("elabChargeTaken") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outgreen("$name | elab charge taken")
						answer("loaddone", "chargetaken", "chargetaken(0)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="elabWaitDeposit", cond=doswitch() )
				}	 
				state("elabWaitDeposit") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | elab wait load done")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t423",targetState="elabDeposit",cond=whenDispatch("deposit"))
				}	 
				state("elabDeposit") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | elab deposit")
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						
									CurrentWeightReal += CurrentTicketFW	
						updateResourceRep( "weightUpdate($CurrentWeightReal)"  
						)
						updateResourceRep( "depositdone($CurrentWeightReal)"  
						)
						updateResourceRep( "robotfree(libero)"  
						)
						CommUtils.outgreen("Deposit - Current weight real: $CurrentWeightReal")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_elabDeposit", 
				 	 					  scope, context!!, "local_tout_coldstorageservice_elabDeposit", 2500.toLong() )
					}	 	 
					 transition(edgeName="t524",targetState="moveRobotHome",cond=whenTimeout("local_tout_coldstorageservice_elabDeposit"))   
					transition(edgeName="t525",targetState="elabTicketRequest",cond=whenRequest("ticketrequest"))
				}	 
				state("moveRobotHome") { //this:State
					action { //it:State
						forward("goMoveToHome", "goMoveToHome(0)" ,"transporttrolley" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
				state("elabClearColdRoom") { //this:State
					action { //it:State
						CommUtils.outgreen("$name | empty coldRoom")
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						forward("updatevirtualweight", "updatevirtualweight($CurrentWeightReal)" ,"ticketservice" ) 
						
									CurrentWeightReal = 0	
						updateResourceRep( "weightUpdate($CurrentWeightReal)"  
						)
						updateResourceRep( "clearcoldroomdone($CurrentWeightReal )"  
						)
						CommUtils.outgreen("$name | coldRoom cleared - current weight real: $CurrentWeightReal")
						answer("clearColdRoom", "coldRoomCleared", "coldRoomCleared(0)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
			}
		}
}
