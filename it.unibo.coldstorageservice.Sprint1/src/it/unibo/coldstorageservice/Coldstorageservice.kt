/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldstorageservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 val ticketList = listOf<Ticket>() 
			   val currentWeight = 0 
			   val maxWeight = 100
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("coldstorageservice starts")
						forward("goMoveToIndoor", "goMoveToIndoor(0)" ,"transporttrolley" ) 
						forward("goMoveToColdRoom", "goMoveToColdRoom(0)" ,"transporttrolley" ) 
						forward("goMoveToHome", "goMoveToHome(0)" ,"transporttrolley" ) 
						forward("goMoveToIndoor", "goMoveToIndoor(0)" ,"transporttrolley" ) 
						forward("goMoveToColdRoom", "goMoveToColdRoom(0)" ,"transporttrolley" ) 
						forward("goMoveToHome", "goMoveToHome(0)" ,"transporttrolley" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("waitclientrequest") { //this:State
					action { //it:State
						CommUtils.outblack("$name | waiting the client request...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="elabNewTicket",cond=whenRequest("newticket"))
					transition(edgeName="t012",targetState="elabTicketRequest",cond=whenRequest("ticketrequest"))
					transition(edgeName="t013",targetState="elabLoadDone",cond=whenRequest("loaddone"))
				}	 
				state("elabNewTicket") { //this:State
					action { //it:State
						
									val ticket = Ticket("aaa", java.time.Instant.now().epochSecond, 3)
						answer("newticket", "newticketaccepted", "newticketaccepted(aaa)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
				state("elabTicketRequest") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ticketrequest(TICKET,FW)"), Term.createTerm("ticketrequest(TICKET,FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val currentTime = java.time.Instant.now().epochSecond 
										   	   val idTicket = payloadArg(0)
										   	   
										   	   for (ticket in ticketList){
										   	   	  //ciclo for per trovare il biglietto del driver nella lista
										   	   }
										   	   
										   	   //val ticketValid = (currentTime - ticket.creationTime) > TIMEMAX
										   	   if(true /*ticketValid*/){
										   	   	
										   	   
								answer("ticketrequest", "ticketaccepted", "ticketaccepted(valid)"   )  
								 } 
											   else{
											   	
											   	
								answer("ticketrequest", "ticketrejected", "ticketrejected(invalid)"   )  
								 }  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
				state("elabLoadDone") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loaddone(FW)"), Term.createTerm("loaddone(FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val foodWeight = payloadArg(0)
													
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_elabLoadDone", 
				 	 					  scope, context!!, "local_tout_coldstorageservice_elabLoadDone", 2500.toLong() )
					}	 	 
					 transition(edgeName="t214",targetState="moveRobotHome",cond=whenTimeout("local_tout_coldstorageservice_elabLoadDone"))   
					transition(edgeName="t215",targetState="elabLoadDone",cond=whenRequest("loaddone"))
				}	 
				state("moveRobotHome") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
			}
		}
}
