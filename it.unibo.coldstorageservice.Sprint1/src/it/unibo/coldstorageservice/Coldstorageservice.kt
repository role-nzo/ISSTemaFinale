/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldstorageservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var ticketList = mutableListOf<Ticket>() 
			   var currentWeightVirtual = 0 
			   var currentWeightReal = 0
			   var maxWeight = 100
			   var TimeMax = 300
			   var CurrentTicketFW = 0
			   var TicketValid = false
			   
			   
			   
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("coldstorageservice starts")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
				state("waitclientrequest") { //this:State
					action { //it:State
						CommUtils.outblack("$name | waiting the client request...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t013",targetState="elabNewTicket",cond=whenRequest("newticket"))
					transition(edgeName="t014",targetState="elabTicketRequest",cond=whenRequest("ticketrequest"))
				}	 
				state("elabNewTicket") { //this:State
					action { //it:State
						CommUtils.outblack("$name | elab new ticket")
						if( checkMsgContent( Term.createTerm("newticket(FW)"), Term.createTerm("newticket(FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											
											var fw = payloadArg(0).toInt()
											if(currentWeightVirtual + fw <= maxWeight){
												currentWeightVirtual += fw
												var Id = Ticket.getRandomId() 
												var found = false
												while(found){
												found = false
												
													for (t in ticketList){
														if(t.id==Id){
															Id = Ticket.getRandomId()
															found = true
															break
														}
													}
												}
												
												var ticket = Ticket(Id, java.time.Instant.now().epochSecond, fw)
												
												ticketList.add(ticket)
												
												println(ticket)
												
											
								answer("newticket", "newticketaccepted", "newticketaccepted($Id)"   )  
								
												} else {
								answer("newticket", "newticketrefused", "newticketrefused(Peso)"   )  
								
												}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
				state("elabTicketRequest") { //this:State
					action { //it:State
						CommUtils.outblack("$name | elab ticket request")
						if( checkMsgContent( Term.createTerm("ticketrequest(TICKET,FW)"), Term.createTerm("ticketrequest(TICKET,FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val currentTime = java.time.Instant.now().epochSecond 
										   	   	val idTicket = payloadArg(0)
										   	   	val foodWeight = payloadArg(1).toInt()
										   	   
										   	   	var ticket : Ticket? = null
										   	   
										   	   	for (t in ticketList) {
													//ciclo for per trovare il biglietto del driver nella lista
										   	   	  	if(t.id == idTicket) {
										   	   	  	
										   	   	  		ticket = t
										   	   	  		break
										   	   	  	}
										   	   	}
										   	   
										   	   	if(ticket==null) { 
										   	   		TicketValid = false
										   	   		println("Not found")
								answer("ticketrequest", "ticketrejected", "ticketrejected(invalid)"   )  
								
										   	   	} 	   
											   	  
											   	if(foodWeight<ticket!!.fw){
													currentWeightVirtual -= (ticket!!.fw-foodWeight)
											   	}
											   	   
												ticketList.remove(ticket)
											   	   
												println(currentTime - ticket!!.creationTime)
											   	   
												if((currentTime - ticket!!.creationTime) < TimeMax) {	
											   	   	
													TicketValid = true
											   	   	println("ticket valid")	
								answer("ticketrequest", "ticketaccepted", "ticketaccepted(valid)"   )  
								
												} else{
													currentWeightVirtual -= ticket!!.fw
											   		TicketValid = false
								answer("ticketrequest", "ticketrejected", "ticketrejected(invalid)"   )  
								
										  		}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitchGuarded({ !TicketValid  
					}) )
					transition( edgeName="goto",targetState="waitLoadDoneRequest", cond=doswitchGuarded({! ( !TicketValid  
					) }) )
				}	 
				state("waitLoadDoneRequest") { //this:State
					action { //it:State
						CommUtils.outblack("$name | wait load request")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t115",targetState="elabLoadDone",cond=whenRequest("loaddone"))
				}	 
				state("elabLoadDone") { //this:State
					action { //it:State
						CommUtils.outblack("$name | elab load done")
						if( checkMsgContent( Term.createTerm("loaddone(FW)"), Term.createTerm("loaddone(FW)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
													CurrentTicketFW = payloadArg(0).toInt()
								forward("goMoveToIndoor", "goMoveToIndoor(0)" ,"transporttrolley" ) 
								request("waitLoad", "waitLoad(0)" ,"transporttrolley" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t216",targetState="elabWaitDeposit",cond=whenReply("waitLoadDone"))
				}	 
				state("elabWaitDeposit") { //this:State
					action { //it:State
						CommUtils.outblack("$name | elab wait load done")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t317",targetState="elabDeposit",cond=whenDispatch("deposit"))
				}	 
				state("elabDeposit") { //this:State
					action { //it:State
						CommUtils.outblack("$name | elab deposit")
						
									currentWeightReal += CurrentTicketFW	
						CommUtils.outblack("Deposit - Current weight real: $currentWeightReal")
						answer("loaddone", "chargetaken", "chargetaken(0)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_elabDeposit", 
				 	 					  scope, context!!, "local_tout_coldstorageservice_elabDeposit", 2500.toLong() )
					}	 	 
					 transition(edgeName="t418",targetState="moveRobotHome",cond=whenTimeout("local_tout_coldstorageservice_elabDeposit"))   
					transition(edgeName="t419",targetState="elabTicketRequest",cond=whenRequest("ticketrequest"))
				}	 
				state("moveRobotHome") { //this:State
					action { //it:State
						forward("goMoveToHome", "goMoveToHome(0)" ,"transporttrolley" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitclientrequest", cond=doswitch() )
				}	 
			}
		}
}
