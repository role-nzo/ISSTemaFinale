System coldstorageservice


Request  doplan   : doplan( PATH, OWNER, STEPTIME )
Reply doplandone  : doplandone( ARG )
Reply doplanfailed  : doplanfailed( PLANDONE, PLANTODO )


Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(ARG)


Request storefood 	: storefood( TICKET, FW )
Reply chargetaken 	: chargetaken(ARG)
Reply chargefailure : chargefailure(REASON)


//Ottenimento del ticket
Request newticket		: newticket( FW )
Reply newticketaccepted : newticketaccepted( TICKET )
Reply newticketrefused  : newticketrefused( REASON )






Context ctxbasicrobot ip [host="127.0.0.1" port=8020]
Context ctxcoldstorageservice ip [host="127.0.0.1" port=8022]
//Context ctxrasp ip[host="IPRASP" port=1111]
Context ctxfridgetruck ip [host="localhost" port=8023] 

ExternalQActor basicrobot context ctxbasicrobot



/*QActor alarmdevice context ctxrasp{
	State s0 initial{
		println("alarmdevice starts") color blue
	}
}

QActor warningdevice context ctxrasp{
	State s0 initial{
		println("warningdevice starts") color blue
	}
}*/

QActor transporttrolley context ctxcoldstorageservice{
	State s0 initial{
		println("transporttrolley starts") color blue
		//Acquisizione del basicrobot
	}
}
	
QActor serviceaccessgui context ctxfridgetruck {
	
	State s0 initial {
		println("serviceaccessgui starts") color red
		request coldstorageservice -m newticket		: newticket( 3 )
	}
	Transition t0 whenReply newticketaccepted -> elabTicketAccepted
	
	State elabTicketAccepted {
		
		printCurrentMessage
		onMsg( newticketaccepted : newticketaccepted(TICKET)){
			[# 
				var CurrentTicketId = payloadArg(0)
				println(CurrentTicketId)
			#]
			
			request coldstorageservice -m storefood : storefood($CurrentTicketId, 3)
		}
	}
	Transition t1 whenReply chargetaken -> elabChargeTaken

	State elabChargeTaken {
		printCurrentMessage
		delay 5000
	}
	Goto s0
	
}


QActor coldstorageservice context ctxcoldstorageservice{
	[#
		var ticketList = mutableListOf<Ticket>()
		var TimeMax = 300
	#]
	
	State s0 initial{
		println("coldstorageservice starts") color green
	}
	Transition t0 whenRequest newticket -> elabNewTicket
				  whenRequest storefood -> elabStoreFood
	
	State elabNewTicket{
		
		println("$name | elab new ticket") color yellow
		printCurrentMessage
		onMsg( newticket : newticket( FW )){
			[#
				var Id = "ABCDE"
				val currentTime = java.time.Instant.now().epochSecond 
				var fw = payloadArg(0).toInt()
				
				var ticket = Ticket(Id, currentTime, fw)
				
				ticketList.add(ticket)
				
				println(ticket)
			#]
			
			replyTo newticket with newticketaccepted:newticketaccepted( $Id )
		}
		
	}
	Goto s0
	
	State elabStoreFood{
		
		println("$name | elab store food") color yellow
		printCurrentMessage
		
		onMsg( storefood : storefood( TICKET, FW )) {
			[#
				val currentTime = java.time.Instant.now().epochSecond 
		   	   	val idTicket = payloadArg(0)
		   	   	val foodWeight = payloadArg(1).toInt()
		   	   
		   	   	var ticket : Ticket? = null
		   	   
		   	   	for (t in ticketList) {
					//ciclo for per trovare il biglietto del driver nella lista
		   	   	  	if(t.id == idTicket) {
		   	   	  		ticket = t
		   	   	  		break
		   	   	  	}
		   	   	}
		   	   
		   	   	if(ticket==null) { 
		   	   		println("Not found")
	   	   			#]
		   	   			replyTo storefood with chargefailure  : chargefailure(invalid)
		   	   		[#
		   	   	} else {   
			   	  	
				   	ticketList.remove(ticket)
				   	   
					println(currentTime - ticket!!.creationTime)
				   	   
					if((currentTime - ticket!!.creationTime) < TimeMax) {	
				   	   	println("ticket valid")	
			   	   		#]
							replyTo storefood with chargetaken  : chargetaken(valid)
						[#
					} else{
						#]
							replyTo storefood with chargefailure  : chargefailure(invalid)		 
			  			[#
			  		}
		  		}
  			#]	  	
		}		
	}
	Goto s0
}

QActor servicestatusgui context ctxcoldstorageservice{ 
	State s0 initial{
		println("servicestatusgui starts") color red
	}
}

QActor fridgetruck context ctxfridgetruck{ 
	State s0 initial{
		println("fridgetruck starts") color red
	}
}




