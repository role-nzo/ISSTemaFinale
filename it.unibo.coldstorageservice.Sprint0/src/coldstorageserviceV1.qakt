System coldstorageservice

Request engage        : engage(ARG) //FATTO
Reply   engagedone    : engagedone(ARG) //FATTO
Reply   engagerefused : engagerefused(ARG) //FATTO

Dispatch disengage : disengage(ARG) //FATTO

Request  doplan   : doplan( PATH, OWNER, STEPTIME )
Reply doplandone  : doplandone( ARG )
Reply doplanfailed  : doplanfailed( PLANDONE, PLANTODO )


Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(ARG)

Dispatch guiupdate : guiupdate(ARG)

Dispatch deposit : deposit(ARG) //FATTO

Dispatch domove : domove(ARG) //FATTO

//Rasp
Event alarm : alarm(ARG)
Event resume : resume(ARG)


//Ottenimento del ticket
Request  ticketrequest  : ticketrequest( ARG )
Reply ticketrequestaccepted  : ticketrequestaccepted( ARG )
Reply ticketrequestrefused  : ticketrequestrefused( ARG )


//Show ticket per rilascio merce
Request showticketrequest  : showticketrequest( ARG )
Reply showticketvalid  : showticketvalid( ARG )
Reply showticketinvalid  : showticketinvalid( ARG )
Dispatch chargetaken : chargetaken(ARG) //FATTO



Context ctxbasicrobot ip [host="127.0.0.1" port=8020]
Context ctxcoldstorageservice ip [host="localhost" port=8022]
Context ctxrasp ip[host="IPRASP" port=1111]
Context ctxfridgetruck ip [host="127.0.0.1" port=8023] //Eliminare -> funziona solo con 3 contesti

ExternalQActor basicrobot context ctxbasicrobot
//ExternalQActor led context ctxrasp
//ExternalQActor sonar context ctxrasp


QActor sonar context ctxrasp{
	State s0 initial{
		println("transporttrolley starts") color blue
		
		emit alarm:alarm(arg)
		emit resume:resume(arg)
    	
	}
}

QActor led context ctxrasp{
	State s0 initial{
		println("transporttrolley starts") color blue
		
		
    	
	}
}

QActor transporttrolley context ctxcoldstorageservice{
	
	[#  val planner = unibo.planner23.Planner23Util()
    val MyName    = name //upcase var
    val MapName   = "mapEmpty23"
    //val MapName = "mapCompleteWithObst23ok"
    val StepTime  = 200 //Era 345
    var Plan      = ""
    var TargetX   = ""
    var TargetY   = ""
    var Position = "" //Sapere posizione del robot da modificare su doMove (necessario sapere verso che direzione si muove il robot)
#]
	
	State s0 initial{
		println("transporttrolley starts") color blue
		//Acquisizione del basicrobot
    	request basicrobot -m engage : engage( $MyName )
	}
	
	Transition t0 whenReply engagedone    -> init
                  whenReply engagerefused -> waitrobotfree
                  
    State waitrobotfree{
	
	}
	
	State init{
		[# planner.initAI() //Per prendere il planner
	    planner.loadRoomMap(MapName) //Chiedo al planner di caricare la mappa
	    planner.showMap() //Chiedo al planner di visualizzare la mappa
	  #]
	} Goto waitclientrequest
	
	State waitclientrequest{
	  
	  println("$name | waiting the client request...")
	  
	}
	Transition t0 whenMsg domove  -> elabMove
	
	State elabMove{
		
		onMsg( domove : domove(ARG) ){
		    [# val dest = payloadArg(0)
		    	//TODO 	
		    	
		  	#]
		  	println("${dest}")
		    
		    /*
		    [#   Plan = planner.planForGoal(""+0,""+0).toString()
               Plan = planner.planCompacted(Plan) //Ottengo la stringa delle mosse da fare in forma compatta 
		
		    #]  */
		    //request basicrobot -m doplan : doplan($Plan, worker, $StepTime)
		  }
		
		
	}
	Transition t0 whenReply doplandone  -> planFinish
				  whenEvent alarm -> stopped
				  whenEvent resume -> resumed
	
	State elabGoToIndoor{
		println("moveTheRobot to Indoor")
		printCurrentMessage color blue
            [#
               Plan = planner.planForGoal(""+1,""+6).toString()
               Plan = planner.planCompacted(Plan) //Ottengo la stringa delle mosse da fare in forma compatta 
            #]
        request basicrobot -m doplan : doplan($Plan, worker, $StepTime)	
	}
	
	
	
	State elabClientRequest{
	  onMsg( moverobot : moverobot(X,Y)){
	    [# TargetX = payloadArg(0)
	      TargetY = payloadArg(1)
	      #]
	  }
	}
	Goto planTheRobotmoves
	
	State planTheRobotmoves{
		println("moveTheRobot to $TargetX $TargetY")
		printCurrentMessage color blue
            [#
               Plan = planner.planForGoal(""+TargetX,""+TargetY).toString()
               Plan = planner.planCompacted(Plan) //Ottengo la stringa delle mosse da fare in forma compatta 
            #]
        request basicrobot -m doplan : doplan($Plan, worker, $StepTime)
	}
	Transition t0 whenReply doplandone   -> endok
              	  whenReply doplanfailed -> endko
              	  
    State endok{
	  //Aggiorno la posizone del robot sulla mappa
	  [# planner.doPathOnMap(Plan) #]
	  [# planner.showCurrentRobotState(); #]
	  replyTo moverobot with moverobotdone : moverobotdone(ok)
	}
	
	State endko{
		onMsg( doplanfailed : doplanfailed(ARG) ){
		    [# val PathTodo = payloadArg(0) #]
		    println("pos NOT reached - PathTodo = ${PathTodo} vs. $Plan") color red
		    println("${Plan.substring(0, Plan.lastIndexOf(PathTodo))}") color blue
		    [#   val PathDone = Plan.substring(0, Plan.lastIndexOf(PathTodo))
		
		    #]
		    [# planner.doPathOnMap(PathDone) #]
		    [# planner.showCurrentRobotState(); #]
		    replyTo moverobot with moverobotfailed : moverobotfailed($PathDone,$PathTodo)
		  }
	}
	
	State stopped{
		
	}
	
	State resumed{
		
	}
	
	State planFinish{
		//Position = coldRoom invia deposit
		//home si gira faccia in basso
		//indoor invia charge taken
		
		forward coldroom -m deposit:deposit(arg)
		
	}
	
	
	
	
	
}

QActor serviceaccessgui context ctxcoldstorageservice{ //SCOMPARE
	State s0 initial{
		println("Serviceaccessgui starts") color red
		
		request coldstorageservice -m ticketrequest:ticketrequest(arg)
		
		request coldstorageservice -m showticketrequest:showticketrequest(arg)
	}
}

QActor coldroom context ctxcoldstorageservice{ //OBSERVABLE
	State s0 initial{
		println("Coldroom starts") color blue
		//eventi: consegna roba, prelevata roba
		
		//Arriva messagio di scarico merce -> aggiorno il peso e updateResource
		
		//Periodicamente si libera spazio -> aggiorno perso e updateResource
		
	}
}

QActor coldstorageservice context ctxcoldstorageservice{ //Registrata a coldRoom
	State s0 initial{
		
		subscribeTo coldroom
		
		
		println("coldstorageservice starts") color green
		
		forward transporttrolley -m domove:domove(home)
		
		forward transporttrolley -m domove:domove(indoor)
		
		
		
		replyTo showticketrequest with showticketvalid:showticketvalid(arg)
		
		replyTo showticketrequest with showticketinvalid:showticketinvalid(arg)
		
		replyTo showticketrequest with ticketrequestaccepted:ticketrequestaccepted(arg)
		
		replyTo showticketrequest with ticketrequestrefused:ticketrequestrefused(arg)
		
		forward serviceaccessgui -m chargetaken:chargetaken(arg)
		
		forward servicestatusgui -m guiupdate:guiupdate(arg)
		
	}
}

QActor servicestatusgui context ctxcoldstorageservice{ //SCOMPARE 
//Registrata a coldRoom
	State s0 initial{
		println("servicestatusgui starts") color red
		
		/*
		 * Posizione corrente robot:
		 * Planner (in transport trolley) ci d√† la posizione del robot, questa invia le informazioni
		 * al coldstorageservice quando ci sono delle modifiche e questa invia delle informazioni al guiupdate
		 */
		
	}
}

QActor fridgetruck context ctxfridgetruck{ //SCOMPARE
	State s0 initial{
		println("fridgetruck starts") color red
	}
}




